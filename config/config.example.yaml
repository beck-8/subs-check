# 是否显示进度
print-progress: true

# 并发线程数
concurrent: 20

# 检查间隔(分钟)
check-interval: 30

# 超时时间(毫秒)(节点的最大延迟)
timeout: 5000

# 测速地址(注意 并发数*节点速度<最大网速 否则测速结果不准确)
# 尽量不要使用Speedtest，Cloudflare提供的下载链接，因为很多节点屏蔽测速网站
# 建议使用自己上传到Cloudflare R2的文件
speed-test-url: https://gh-proxy.henryjiu.workers.dev/https://github.com/AaronFeng753/Waifu2x-Extension-GUI/releases/download/v2.21.12/Waifu2x-Extension-GUI-v2.21.12-Portable.7z

# 最低测速结果舍弃(KB/s)
min-speed: 1024

# 下载测试时间(s)(与下载链接大小相关，默认最大测试10s)
download-timeout: 10

# 是否启用http服务 默认为启动ture
http-server: true

# 监听端口，用于直接返回节点信息，方便订阅转换
# HTTP服务监听端口，请自行修改,留空则使用默认8199端口
# Example: http://127.0.0.1:8199/sub/all.yaml
listen-port: ""

# 以节点IP查询位置重命名节点
# 质量差的节点可能造成IP查询失败，造成整体检查速度稍微变慢，默认false
rename-node: false

# mihomo api url(测试完成后自动更新mihomo订阅)
mihomo-api-url: ""

# mihomo api secret
mihomo-api-secret: ""

# 保存方法
# 目前支持的保存方法: r2, local, gist, webdav
save-method: local

# local文件输出目录，为空则输出到当前程序所在目录下的output目录
# windows 示例: "C:\\Users\\name\\subs-check\\temp"
# linux 示例: "/root/subs-check/temp"
local-output-path: ""

# webdav
webdav-url: "https://example.com/dav/"
webdav-username: "admin"
webdav-password: "admin"

# gist id
github-gist-id: ""

# github token
github-token: ""

# github api mirror
github-api-mirror: ""

# 将测速结果推送到Worker的地址
worker-url: https://example.worker.dev

# Worker令牌
worker-token: 1234567890

# 重试次数(获取订阅失败后重试次数)
sub-urls-retry: 3

# 是否使用代理下载订阅节点和上传gist使用代理,支持http/socks5，不使用代理请留空 
proxy-type: ""
# 代理地址，填写规则如下
# 无需认证代理：http://host:port 或 socks5://host:port
# 需要认证代理：http://username:password@host:prot 或 socks5://username:password@host:prot 
proxy-url: ""

# 订阅地址 支持 clash/mihomo/v2ray/base64 格式的订阅链接
# 如果用户想使用clash类型，那可以在支持的订阅链接结尾加上 &flag=clash.meta
sub-urls:
  - https://example.com/sub.txt
  - https://example.com/sub2.txt
  - https://example.com/sub?token=43fa8f0dc9bb00dcfec2afb21b14378a
  - https://example.com/sub?token=43fa8f0dc9bb00dcfec2afb21b14378a?flag=clash.meta
